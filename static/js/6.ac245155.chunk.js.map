{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/charSearchForm.js","components/errorBoundary/ErrorBoundary.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.gif","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js"],"names":["View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","src","alt","style","href","RandomChar","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","timerId","setInterval","clearInterval","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","Skeleton","comics","CharInfo","charId","skeleton","CharSearchForm","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","MainPage","selectedChar","Helmet","decoration","display","width","height","objectFit","margin","img","setLoading","setError","request","useCallback","url","a","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiPublicKey","_apiKey","calculateHash","ts","hash","md5","create","update","hex","res","_transformCharacter","getAllComics","Number","Date","_transformComics","getComic","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"mappings":"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","file":"static/js/6.ac245155.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\n\nimport './randomChar.scss';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\nconst RandomChar = () => {\n\n    const [char, setChar] = useState({});\n    \n\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n        const timerId = setInterval(updateChar, 60000);\n\n        return () => {\n            clearInterval(timerId);\n        }\n    }, [])\n\n    const onCharLoaded = (char) => {\n            setChar(char);\n    }\n\n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n\nconst errorMessage = error ? <ErrorMessage /> : null;\nconst spinner = loading ? <Spinner /> : null;\nconst content = !(loading || error) ? <View char={char} /> : null;\n\nreturn (\n    <div className=\"randomchar\">\n        {errorMessage}\n        {spinner}\n        {content}\n        <div className=\"randomchar__static\">\n            <p className=\"randomchar__title\">\n                Random character for today!<br />\n                Do you want to get to know him better?\n            </p>\n            <p className=\"randomchar__title\">\n                Or choose another one\n            </p>\n            <button onClick={updateChar} className=\"button button__main\">\n                <div className=\"inner\">try it</div>\n            </button>\n            <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n        </div>\n    </div>\n)\n    \n}\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki } = char;\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'contain' };\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle} />\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\nimport PropTypes from 'prop-types';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\nimport './charList.scss';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(210);\n    const [charEnded, setCharEnded] = useState(false);\n\n    const { loading, error, getAllCharacters } = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])\n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n\n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    }\n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        // Я реализовал вариант чуть сложнее, и с классом и с фокусом\n        // Но в теории можно оставить только фокус, и его в стилях использовать вместо класса\n        // На самом деле, решение с css-классом можно сделать, вынеся персонажа\n        // в отдельный компонент. Но кода будет больше, появится новое состояние\n        // и не факт, что мы выиграем по оптимизации за счет бОльшего кол-ва элементов\n\n        // По возможности, не злоупотребляйте рефами, только в крайних случаях\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n    // Этот метод создан для оптимизации, \n    // чтобы не помещать такую конструкцию в метод render\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n            let imgStyle = { 'objectFit': 'cover' };\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = { 'objectFit': 'unset' };\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li\n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        key={item.id}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        // А эта конструкция вынесена для центровки спиннера/ошибки\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>\n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading && !newItemLoading ? <Spinner /> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button\n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{ 'display': charEnded ? 'none' : 'block' }}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n}\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\nimport './charInfo.scss';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)\n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const skeleton = char || loading || error ? null : <Skeleton />;\n    const errorMessage = error ? <ErrorMessage /> : null;\n    const spinner = loading ? <Spinner /> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n    \n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n}\n\n\n\nconst View = ({ char }) => {\n    const { name, description, thumbnail, homepage, wiki, comics } = char;\n\n    let imgStyle = { 'objectFit': 'cover' };\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = { 'objectFit': 'unset' };\n    }\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle} />\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There is no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        // eslint-disable-next-line\n                        if (i > 9) return;\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }\n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import {useState} from 'react';\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\nimport * as Yup from 'yup';\nimport {Link} from 'react-router-dom';\n\nimport useMarvelService from '../../services/MarvelService';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\n\nimport './charSearchForm.scss';\n\nconst CharSearchForm = () => {\n    const [char, setChar] = useState(null);\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\n\n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n\n    const updateChar = (name) => {\n        clearError();\n\n        getCharacterByName(name)\n            .then(onCharLoaded);\n    }\n\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\n    const results = !char ? null : char.length > 0 ?\n                    <div className=\"char__search-wrapper\">\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\n                            <div className=\"inner\">To page</div>\n                        </Link>\n                    </div> : \n                    <div className=\"char__search-error\">\n                        The character was not found. Check the name and try again\n                    </div>;\n\n    return (\n        <div className=\"char__search-form\">\n            <Formik\n                initialValues = {{\n                    charName: ''\n                }}\n                validationSchema = {Yup.object({\n                    charName: Yup.string().required('This field is required')\n                })}\n                onSubmit = { ({charName}) => {\n                    updateChar(charName);\n                }}\n            >\n                <Form>\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\n                    <div className=\"char__search-wrapper\">\n                        <Field \n                            id=\"charName\" \n                            name='charName' \n                            type='text' \n                            placeholder=\"Enter name\"/>\n                        <button \n                            type='submit' \n                            className=\"button button__main\"\n                            disabled={loading}>\n                            <div className=\"inner\">find</div>\n                        </button>\n                    </div>\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\n                </Form>\n            </Formik>\n            {results}\n            {errorMessage}\n        </div>\n    )\n}\n\nexport default CharSearchForm;","import { Component } from \"react/cjs/react.production.min\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nclass ErrorBoundary extends Component {\n    state = {\n        error: false\n    }\n\n    // static getDerivedStateFromError(error) {\n    //     return {error: true};\n    // }\n\n    componentDidCatch(error, errorInfo) {\n        console.log(error, errorInfo);\n        this.setState({\n            error: true\n        })\n    }\n\n    render() {\n        if(this.state.error) {\n            return <ErrorMessage/>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import { useState } from \"react\";\nimport { Helmet } from \"react-helmet\";\nimport RandomChar from \"../randomChar/RandomChar\";\nimport CharList from \"../charList/CharList\";\nimport CharInfo from \"../charInfo/CharInfo\";\nimport CharSearchForm from \"../charSearchForm/charSearchForm\";\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\n\nimport decoration from '../../resources/img/vision.png';\n\nconst MainPage = () => {\n\n    const [selectedChar, setChar] = useState(null);\n\n    const onCharSelected = (id) => {\n        setChar(id);\n    }\n\n    return (\n        <>\n            <Helmet>\n                <meta\n                    name=\"description\"\n                    content=\"Marvel information portal\"\n                />\n                <title>Marvel information portal</title>\n            </Helmet>\n            <ErrorBoundary>\n                <RandomChar />\n            </ErrorBoundary>\n            <div className=\"char__content\">\n                <ErrorBoundary>\n                    <CharList onCharSelected={onCharSelected} />\n                </ErrorBoundary>\n                <div>\n                    <ErrorBoundary>\n                        <CharInfo charId={selectedChar} />\n                    </ErrorBoundary>\n                    <ErrorBoundary>\n                        <CharSearchForm />\n                    </ErrorBoundary>\n                </div>\n\n            </div>\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\n        </>\n    )\n}\n\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.42292aa1.gif\";","import img from './error.gif'\n\nconst ErrorMessage = () => {\n    return (\n        <img style={{ display: 'block', width: \"250px\", height: \"250px\",objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>\n    )\n}\n\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook';\nimport md5 from 'js-md5';\n\nconst useMarvelService = () => {\n    const {loading, request, error, clearError} = useHttp();\n\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\n    const _apiPublicKey = 'aca1ce62f71271b3430f23a36cc46813'\n    const _apiPrivateKey = 'daedd6f8f7d108f58b804232d36abaf7428a5b4e';\n    const _apiKey = `apikey=${_apiPublicKey}`;\n    const _baseOffset = 210;\n    \n    const calculateHash = (ts) => {\n        const hash = md5.create();\n        hash.update(ts + _apiPrivateKey + _apiPublicKey);\n        return hash.hex();\n    }\n\n    const getCharacterByName = async (name) => {\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getAllCharacters = async (offset = _baseOffset) => {\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\n        return res.data.results.map(_transformCharacter);\n    }\n\n    const getCharacter = async (id) => {\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\n        return _transformCharacter(res.data.results[0]);\n    }\n\n    const getAllComics = async (offset = 0) => {\n        const ts = Number(new Date());\n        const res = await request(`${_apiBase}comics?ts=${ts}&orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}&hash=${calculateHash(ts)}`);\n        return res.data.results.map(_transformComics);\n    }\n    \n\n    const getComic = async (id) => {\n        const ts = Number(new Date());\n        console.log(`${_apiBase}comics/${id}?${_apiKey}&hash=${calculateHash(ts)}&ts=${ts}`)\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}&hash=${calculateHash(ts)}&ts=${ts}`);\n        return _transformComics(res.data.results[0]);\n    }\n\n    const _transformCharacter = (char) => {\n        return {\n            id: char.id,\n            name: char.name,\n            description: char.description ? `${char.description.slice(0,210)}...` : 'there is no description for this character',\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\n            homepage: char.urls[0].url,\n            wiki: char.urls[1].url,\n            comics: char.comics.items\n        }\n    }\n\n    const _transformComics = (comics) => {\n        return {\n            id: comics.id,\n            title: comics.title,\n            description: comics.description || 'There is no description',\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\n            language: comics.textObjects.language || 'en-us',\n            price: comics.prices.price ? `${comics.prices.price}$` : 'not available'\n        }\n    }\n\n    return {loading, error, clearError, getCharacterByName, getAllCharacters, getCharacter, getAllComics, getComic}\n}\n\nexport default useMarvelService;","import { useState, useCallback } from \"react\";\n\nexport const useHttp = () => {\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const request = useCallback(async (url, method='GET', body = null, headers = {'Content-Type': 'application/json'}) => {\n\n        setLoading(true);\n\n        try {\n            const response = await fetch(url, {method, body, headers});\n\n            if (!response.ok) {\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\n            }\n\n            const data = await response.json();\n\n            setLoading(false);\n            return data;\n\n        } catch(e) {\n            setLoading(false);\n            setError(e.message);\n            throw e;\n        }\n\n    }, [])\n\n    const clearError = useCallback(() => setError(null), []);\n\n    return {loading, request, error, clearError}\n}"],"sourceRoot":""}